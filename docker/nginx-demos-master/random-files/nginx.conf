user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;
events { worker_connections  1024; }
http {
	default_type  text/html;
	log_format  main  '$remote_addr -> $request	$status $body_bytes_sent bytes 	-> $upstream_addr';
	access_log  /var/log/nginx/access.log  main;
	proxy_cache_path /tmp/nginx-cache keys_zone=content-zone:10m;
	# R7 compatibility
	upstream example {
		zone example 64k;
		server [::1]:8080;
	}
	upstream backend {
		zone backend 64k;
		queue 30;
	}
	server {
		status_zone samplepages;
		listen  80;
		location / {
			proxy_pass http://backend;
			error_page 502 =200 @failed;
		}
		location @failed {
			default_type text/html;
			return 200 "
			<html><head><meta http-equiv=\"refresh\" content=\"1\">
			</head><body><br/><br/><h1>HTTP 502 / No backend servers</h1>
			<h3>Refreshing automatically</h3></body>";
		}
		location @healthcheck {
			proxy_pass http://backend;
			proxy_connect_timeout 1s;
			proxy_read_timeout 1s;
			health_check uri=/ interval=1s match=noterror;
		}
	}
	match noterror {
		status 200;
		body ~ "Content";
	}
	server {
		listen 8080;
		status_zone status-page;
		location = /status.html { root /usr/share/nginx/html; }
		location = /status-old.html { root /usr/share/nginx/html; }
		location = / {
			return 301 /status.html;
		}
		location /status {
			status;
			status_format json;
			access_log off;
		}
		location /upstream_conf {
			upstream_conf;
		}
		location /add {
			rewrite ^/add/(.*)/(.*)$ /upstream_conf?add=&upstream=backend&server=$1:$2&max_fails=0;
		}
		location /addme {
			rewrite ^/addme/(.*)$ /upstream_conf?add=&upstream=backend&server=$remote_addr:$1&max_fails=0;
		}
		location /remove {
			rewrite ^/remove/(.*)$ /upstream_conf?remove=&upstream=backend&id=$1;
		}
		location /list {
			rewrite ^/list$ /upstream_conf?list=&upstream=backend;
		}
	}
}
stream {
	upstream mysql_backend {
		zone mysql_backend 64k;
		server localhost:3306;
	}
	server {
		listen 13306;
		status_zone mysql_server;
		proxy_pass mysql_backend;
	}
}

