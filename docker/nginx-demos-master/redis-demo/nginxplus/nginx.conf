user  nginx;
error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;
load_module modules/ngx_stream_js_module.so;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    #default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    charset                     utf-8;
    include /etc/nginx/conf.d/*.conf;
}


# TCP/UDP proxy and load balancing block
#
stream {
    # Example configuration for TCP load balancing
    log_format redis '$remote_addr [$time_local] $protocol $status $bytes_received '
                 '$bytes_sent $upstream_addr $upstream_connect_time '
                 '$upstream_first_byte_time $upstream_session_time $session_time '
		 '$redis_command'; # Set by nginScript;

    js_include /etc/nginx/redis_command.js;
    js_set     $redis_command setRedisCommand;

    upstream redis_backend {
        zone redis 64k;
	server 172.17.0.1:63791;
	server 172.17.0.1:63792;
	server 172.17.0.1:63793;
    }

    match redis {
        # don't forget '\n' otherwise you'll never get response.
	send "config get maxclients\n";
	expect ~* "maxclients";
    }

    server {
        listen 6379;
        status_zone redis;
	proxy_timeout 2s;
        health_check match=redis mandatory interval=20 fails=1 passes=2;
        proxy_pass redis_backend;

	js_filter getRedisCommand;
	access_log /var/log/nginx/redis_access.log redis;
	error_log /var/log/nginx/redis_error.log info;
    }
}
